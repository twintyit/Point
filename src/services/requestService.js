import api from '../api/api.js';

export default class RequestService {
    constructor(method, url) {
        this.method = method;
        this.url = url;
        this.headers = { 'Content-Type': 'application/json' };
        this.params = {};
        this.data = null;
    }

    setHeader(key, value) {
        this.headers[key] = value;
        return this;
    }

    setToken(token) {
        this.setHeader('Authorization', `Bearer ${token}`);
        return this;
    }

    setQueryParams(params) {
        this.params = { ...this.params, ...params };
        return this;
    }

    setData(data) {
        this.data = data;
        return this;
    }

    setFormData(data) {
        this.data = data;
        console.log(data)
        delete this.headers['Content-Type'];
        return this;
    }

    async send() {
        // eslint-disable-next-line no-useless-catch
        try {
            const config = {
                headers: this.headers,
                params: this.params,
            };

            console.log(`üì§ [${this.method.toUpperCase()}] ${this.url}`);
            if (this.data) console.log("üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", this.data);

            const preparedData = this.data instanceof FormData ? this.data : JSON.stringify(this.data);

            const response =
                this.method === "get"
                    ? await api.get(this.url, config)
                    : await api[this.method](this.url, preparedData, config);

            console.log(response)

            return response.data;
        } catch (error) {
            throw error; // –ø—Ä–æ—Å—Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        }
    }

    async handleRequest() {
        try {
            const data = await this.send();  // –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º send, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É

            console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç ${this.url}`, data);
            return data;
        } catch (error) {
            if (error.response) {
                const {status, data} = error.response;

                console.error(
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ [${this.method.toUpperCase()}] ${this.url} - ${status}\nüìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`,
                    data
                );

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                switch (status) {
                    case 400:
                        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ (400):", data.message);
                        break;
                    case 401:
                        console.warn("üîí –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (401) ‚Äì —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥!");
                        break;
                    case 403:
                        console.warn("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)!");
                        break;
                    case 404:
                        console.warn("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ (404):", this.url);
                        break;
                    case 500:
                        console.warn("üî• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500)!");
                        break;
                    default:
                        console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (${status})`, data);
                }
            } else if (error.request) {
                console.error(`‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å [${this.method.toUpperCase()}] ${this.url}`);
            } else {
                console.error(`üî• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
            }

            throw error; // –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        }
    }
}